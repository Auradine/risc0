if(ENABLE_TESTS)
	include(FetchContent)
	FetchContent_Declare(googletest URL https://github.com/google/googletest/archive/609281088cfefc76f9d0ce82e1ff6c30cc3591e5.zip)
	# For Windows: Prevent overriding the parent project's compiler/linker settings
	set(gtest_force_shared_crt ON CACHE BOOL "" FORCE)
	FetchContent_MakeAvailable(googletest)
	include(GoogleTest)
	set (GTEST_LIBS gtest gtest_main)
	set (GTEST_OUTPUT ${CMAKE_BINARY_DIR}/tests)

        macro( add_risc0_test  test_prefix filename test_libs)
		message ("Adding a test case:" ${filename} "  Libs:" ${test_libs})
                add_executable( ${test_prefix}-${filename}  ${filename}.cpp )
                set_target_properties(${test_prefix}-${filename} PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${GTEST_OUTPUT})
		string(REPLACE " " ";" test_libs_list ${test_libs})
                target_link_libraries( ${test_prefix}-${filename}  ${test_libs_list} ${GTEST_LIBS} )
                gtest_discover_tests( ${test_prefix}-${filename} )
        endmacro( add_risc0_test )

else()
        message (WARNING,"Google testing is disabled.")
endif()

if(BUILD_RISCVCROSS)
        message("Building riscv-gnu-toolchain cross code")
	include (cmake/riscv.appdefs.cmake)
else()
        message (WARNING,"Builds for riscv-gnu-toolchain are disabled")
	include (cmake/native.appdefs.cmake)
endif()

if(BUILD_RISCVM)
        message("Building risc VM")
        find_package(TBB REQUIRED)
else()
        message (WARNING,"Builds for risc VM are disabled.")
endif()


macro( risc0_make_id name src_file )
	message ("Processing risc0_make_id:" ${name} ${src_file})
	add_custom_command(OUTPUT ${src_file}.id COMMAND ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/make-id ${src_file} ${src_file}.id  VERBATIM DEPENDS ${src_file})
	add_custom_target(${name} ALL DEPENDS ${src_file}.id)
	add_dependencies(${name} make-id)
endmacro( risc0_make_id )

macro( risc0_make_circuit name output_file )
        message ("Processing risc0_make_circuit:" ${name} )
        add_custom_command(OUTPUT ${output_file} COMMAND ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/make-circuit ${output_file} VERBATIM)
        add_custom_target(${name} ALL DEPENDS ${output_file})
        add_dependencies(${name} make-circuit )
endmacro( risc0_make_circuit )

